package main

import (
	"bufio"
	"fmt"
	"math"
	"os"
)

//Головоломка <<Ханойские башни>> состоит из трёх стержней, пронумеруем их слева направо: 1, 2 и 3. Также в головоломке
//используется стопка дисков с отверстием посередине. Радиус дисков уменьшается снизу вверх. Изначально диски расположены
//на левом стержне (стержень 1), самый большой диск находится внизу. Диски в игре перемещаются по одному со стержня
//на стержень. Диск можно надеть на стержень, только если он пустой или верхний диск на нём большего размера, чем перемещаемый.
//Цель головоломки — перенести все диски со стержня 1 на стержень 3.
//
//Требуется найти последовательность ходов, которая решает головоломку <<Ханойские башни>>.
//
//В первой строке задано одно число n (3≤n≤10) — количество дисков на первой башне.
//В первой строке выведите количество операций k.
//В следующих k строках выведите по два числа в каждой xi, yi (1≤xi, yi≤3) — переместить верхний диск со стержня xi на стержень yi.

// Пример 1
//Ввод 3
//Вывод
//7
//1 3
//1 2
//3 2
//1 3
//2 1
//2 3
//1 3

//Пример 2
//Ввод 4
//Вывод
//15
//1 2
//1 3
//2 3
//1 2
//3 1
//3 2
//1 2
//1 3
//2 3
//2 1
//3 1
//2 3
//1 2
//1 3
//2 3

func main() {
	in := bufio.NewReader(os.Stdin)
	out := bufio.NewWriter(os.Stdout)
	defer out.Flush()
	var n int
	fmt.Fscanln(in, &n)

	var k int

	k = int(math.Pow(2, float64(n))) - 1
	fmt.Fprintln(out, k)

	hanoiTowers(n, 1, 3, out)

}

func hanoiTowers(n int, fromPeg int, toPeg int, out *bufio.Writer) {

	if n == 1 {
		fmt.Fprintln(out, fromPeg, toPeg)
		return
	}
	unusedPeg := 6 - fromPeg - toPeg
	hanoiTowers(n-1, fromPeg, unusedPeg, out)
	fmt.Fprintln(out, fromPeg, toPeg)
	hanoiTowers(n-1, unusedPeg, toPeg, out)
}
